// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// A care team (default view)
//
// Identifier: application/vnd.careteam+json; view=default
type Careteam struct {
	// Timestamp for care team creation
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Unique care team ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Care team leader
	Leader *string `form:"leader,omitempty" json:"leader,omitempty" xml:"leader,omitempty"`
	// Care team name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// A care team (link view)
//
// Identifier: application/vnd.careteam+json; view=link
type CareteamLink struct {
	// Unique care team ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Care team name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DecodeCareteam decodes the Careteam instance encoded in resp body.
func (c *Client) DecodeCareteam(resp *http.Response) (*Careteam, error) {
	var decoded Careteam
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCareteamLink decodes the CareteamLink instance encoded in resp body.
func (c *Client) DecodeCareteamLink(resp *http.Response) (*CareteamLink, error) {
	var decoded CareteamLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CareteamCollection is the media type for an array of Careteam (default view)
//
// Identifier: application/vnd.careteam+json; type=collection; view=default
type CareteamCollection []*Careteam

// DecodeCareteamCollection decodes the CareteamCollection instance encoded in resp body.
func (c *Client) DecodeCareteamCollection(resp *http.Response) (CareteamCollection, error) {
	var decoded CareteamCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A patient (default view)
//
// Identifier: application/vnd.patient+json; view=default
type Patient struct {
	Address *Address `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Age of Patient
	Age *int `form:"age,omitempty" json:"age,omitempty" xml:"age,omitempty"`
	// Birth Date of Patient
	BirthDate *time.Time `form:"birthDate,omitempty" json:"birthDate,omitempty" xml:"birthDate,omitempty"`
	// Gender of Patient
	Gender *string `form:"gender,omitempty" json:"gender,omitempty" xml:"gender,omitempty"`
	// Unique patient ID
	ID   string `form:"id" json:"id" xml:"id"`
	Name *struct {
		// Family Name
		Family *string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
		// Full Name
		Full *string `form:"full,omitempty" json:"full,omitempty" xml:"full,omitempty"`
		// Given Name
		Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
		// Middle Initial
		MiddleInitial *string `form:"middleInitial,omitempty" json:"middleInitial,omitempty" xml:"middleInitial,omitempty"`
	} `form:"name" json:"name" xml:"name"`
	RiskAssessments []*RiskAssessment `form:"riskAssessments,omitempty" json:"riskAssessments,omitempty" xml:"riskAssessments,omitempty"`
}

// Validate validates the Patient media type instance.
func (mt *Patient) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// A patient (link view)
//
// Identifier: application/vnd.patient+json; view=link
type PatientLink struct {
	// Unique patient ID
	ID   string `form:"id" json:"id" xml:"id"`
	Name *struct {
		// Family Name
		Family *string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
		// Full Name
		Full *string `form:"full,omitempty" json:"full,omitempty" xml:"full,omitempty"`
		// Given Name
		Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
		// Middle Initial
		MiddleInitial *string `form:"middleInitial,omitempty" json:"middleInitial,omitempty" xml:"middleInitial,omitempty"`
	} `form:"name" json:"name" xml:"name"`
}

// Validate validates the PatientLink media type instance.
func (mt *PatientLink) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodePatient decodes the Patient instance encoded in resp body.
func (c *Client) DecodePatient(resp *http.Response) (*Patient, error) {
	var decoded Patient
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodePatientLink decodes the PatientLink instance encoded in resp body.
func (c *Client) DecodePatientLink(resp *http.Response) (*PatientLink, error) {
	var decoded PatientLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PatientCollection is the media type for an array of Patient (default view)
//
// Identifier: application/vnd.patient+json; type=collection; view=default
type PatientCollection []*Patient

// Validate validates the PatientCollection media type instance.
func (mt PatientCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodePatientCollection decodes the PatientCollection instance encoded in resp body.
func (c *Client) DecodePatientCollection(resp *http.Response) (PatientCollection, error) {
	var decoded PatientCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
