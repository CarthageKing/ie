// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": care_team Resource Client
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateCareTeamPath computes a request path to the create action of care_team.
func CreateCareTeamPath() string {

	return fmt.Sprintf("/api/care_teams")
}

// Create care team.
func (c *Client) CreateCareTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateCareTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCareTeamRequest create the request corresponding to the create action endpoint of the care_team resource.
func (c *Client) NewCreateCareTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteCareTeamPath computes a request path to the delete action of care_team.
func DeleteCareTeamPath() string {

	return fmt.Sprintf("/api/care_teams")
}

// Delete care team.
func (c *Client) DeleteCareTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteCareTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteCareTeamRequest create the request corresponding to the delete action endpoint of the care_team resource.
func (c *Client) NewDeleteCareTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCareTeamPath computes a request path to the list action of care_team.
func ListCareTeamPath() string {

	return fmt.Sprintf("/api/care_teams")
}

// List all care teams.
func (c *Client) ListCareTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCareTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCareTeamRequest create the request corresponding to the list action endpoint of the care_team resource.
func (c *Client) NewListCareTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCareTeamPath computes a request path to the show action of care_team.
func ShowCareTeamPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/care_teams/%s", param0)
}

// Get care team by id.
func (c *Client) ShowCareTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCareTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCareTeamRequest create the request corresponding to the show action endpoint of the care_team resource.
func (c *Client) NewShowCareTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateCareTeamPath computes a request path to the update action of care_team.
func UpdateCareTeamPath() string {

	return fmt.Sprintf("/api/care_teams")
}

// Update care team.
func (c *Client) UpdateCareTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpdateCareTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCareTeamRequest create the request corresponding to the update action endpoint of the care_team resource.
func (c *Client) NewUpdateCareTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
