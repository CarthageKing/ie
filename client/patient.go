// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": patient Resource Client
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListPatientPath computes a request path to the list action of patient.
func ListPatientPath() string {

	return fmt.Sprintf("/api/patients")
}

// List all patients.
func (c *Client) ListPatient(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPatientRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPatientRequest create the request corresponding to the list action endpoint of the patient resource.
func (c *Client) NewListPatientRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowPatientPath computes a request path to the show action of patient.
func ShowPatientPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/patients/%s", param0)
}

// Get patient by id.
func (c *Client) ShowPatient(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPatientRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPatientRequest create the request corresponding to the show action endpoint of the patient resource.
func (c *Client) NewShowPatientRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
