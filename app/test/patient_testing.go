// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": patient TestHelpers
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/intervention-engine/ie/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// ListPatientBadRequest runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListPatientBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, careTeamID *string, huddleID *string, page *int, perPage *int, sortBy *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		query["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		query["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		query["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		query["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		query["sort_by"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/patients"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		prms["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		prms["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		prms["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		prms["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		prms["sort_by"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	listCtx, _err := app.NewListPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// ListPatientInternalServerError runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListPatientInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, careTeamID *string, huddleID *string, page *int, perPage *int, sortBy *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		query["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		query["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		query["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		query["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		query["sort_by"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/patients"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		prms["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		prms["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		prms["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		prms["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		prms["sort_by"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	listCtx, _err := app.NewListPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ListPatientNotFound runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListPatientNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, careTeamID *string, huddleID *string, page *int, perPage *int, sortBy *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		query["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		query["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		query["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		query["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		query["sort_by"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/patients"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		prms["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		prms["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		prms["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		prms["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		prms["sort_by"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	listCtx, _err := app.NewListPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListPatientOK runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListPatientOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, careTeamID *string, huddleID *string, page *int, perPage *int, sortBy *string) (http.ResponseWriter, app.PatientCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		query["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		query["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		query["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		query["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		query["sort_by"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/patients"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		prms["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		prms["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		prms["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		prms["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		prms["sort_by"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	listCtx, _err := app.NewListPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.PatientCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.PatientCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.PatientCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListPatientOKList runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListPatientOKList(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, careTeamID *string, huddleID *string, page *int, perPage *int, sortBy *string) (http.ResponseWriter, app.PatientListCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		query["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		query["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		query["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		query["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		query["sort_by"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/patients"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if careTeamID != nil {
		sliceVal := []string{*careTeamID}
		prms["care_team_id"] = sliceVal
	}
	if huddleID != nil {
		sliceVal := []string{*huddleID}
		prms["huddle_id"] = sliceVal
	}
	if page != nil {
		sliceVal := []string{strconv.Itoa(*page)}
		prms["page"] = sliceVal
	}
	if perPage != nil {
		sliceVal := []string{strconv.Itoa(*perPage)}
		prms["per_page"] = sliceVal
	}
	if sortBy != nil {
		sliceVal := []string{*sortBy}
		prms["sort_by"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	listCtx, _err := app.NewListPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.PatientListCollection
	if resp != nil {
		var ok bool
		mt, ok = resp.(app.PatientListCollection)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.PatientListCollection", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowPatientBadRequest runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// ShowPatientInternalServerError runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ShowPatientNotFound runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowPatientOK runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) (http.ResponseWriter, *app.Patient) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.Patient
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.Patient)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.Patient", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowPatientOKLink runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientOKLink(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) (http.ResponseWriter, *app.PatientLink) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.PatientLink
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.PatientLink)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.PatientLink", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowPatientOKList runs the method Show of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowPatientOKList(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.PatientController, id string) (http.ResponseWriter, *app.PatientList) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/patients/%v", id),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["id"] = []string{fmt.Sprintf("%v", id)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "PatientTest"), rw, req, prms)
	showCtx, _err := app.NewShowPatientContext(goaCtx, req, service)
	if _err != nil {
		panic("invalid test data " + _err.Error()) // bug
	}

	// Perform action
	_err = ctrl.Show(showCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.PatientList
	if resp != nil {
		var ok bool
		mt, ok = resp.(*app.PatientList)
		if !ok {
			t.Fatalf("invalid response media: got %+v, expected instance of app.PatientList", resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}
