// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application User Types
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package app

import (
	"time"
)

// careTeamMembership user type.
type careTeamMembership struct {
	// Care Team ID
	CareTeamID *string `form:"care_team_id,omitempty" json:"care_team_id,omitempty" xml:"care_team_id,omitempty"`
	// Timestamp of membership
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Relationship ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Patient ID
	PatientID *string `form:"patient_id,omitempty" json:"patient_id,omitempty" xml:"patient_id,omitempty"`
}

// Publicize creates CareTeamMembership from careTeamMembership
func (ut *careTeamMembership) Publicize() *CareTeamMembership {
	var pub CareTeamMembership
	if ut.CareTeamID != nil {
		pub.CareTeamID = ut.CareTeamID
	}
	if ut.CreatedAt != nil {
		pub.CreatedAt = ut.CreatedAt
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.PatientID != nil {
		pub.PatientID = ut.PatientID
	}
	return &pub
}

// CareTeamMembership user type.
type CareTeamMembership struct {
	// Care Team ID
	CareTeamID *string `form:"care_team_id,omitempty" json:"care_team_id,omitempty" xml:"care_team_id,omitempty"`
	// Timestamp of membership
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Relationship ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Patient ID
	PatientID *string `form:"patient_id,omitempty" json:"patient_id,omitempty" xml:"patient_id,omitempty"`
}

// careTeamPayload user type.
type careTeamPayload struct {
	// Timestamp for care team creation
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Unique care team ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Care team leader
	Leader *string `form:"leader,omitempty" json:"leader,omitempty" xml:"leader,omitempty"`
	// Care team name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Publicize creates CareTeamPayload from careTeamPayload
func (ut *careTeamPayload) Publicize() *CareTeamPayload {
	var pub CareTeamPayload
	if ut.CreatedAt != nil {
		pub.CreatedAt = ut.CreatedAt
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Leader != nil {
		pub.Leader = ut.Leader
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// CareTeamPayload user type.
type CareTeamPayload struct {
	// Timestamp for care team creation
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Unique care team ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Care team leader
	Leader *string `form:"leader,omitempty" json:"leader,omitempty" xml:"leader,omitempty"`
	// Care team name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// huddleMembership user type.
type huddleMembership struct {
	// Timestamp of membership
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// huddle ID
	HuddleID *string `form:"huddle_id,omitempty" json:"huddle_id,omitempty" xml:"huddle_id,omitempty"`
	// Relationship ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Patient ID
	PatientID *string `form:"patient_id,omitempty" json:"patient_id,omitempty" xml:"patient_id,omitempty"`
	// Reason patient was added to huddle
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Has patient been reviewed in this huddle
	Reviewed *bool `form:"reviewed,omitempty" json:"reviewed,omitempty" xml:"reviewed,omitempty"`
}

// Publicize creates HuddleMembership from huddleMembership
func (ut *huddleMembership) Publicize() *HuddleMembership {
	var pub HuddleMembership
	if ut.CreatedAt != nil {
		pub.CreatedAt = ut.CreatedAt
	}
	if ut.HuddleID != nil {
		pub.HuddleID = ut.HuddleID
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.PatientID != nil {
		pub.PatientID = ut.PatientID
	}
	if ut.Reason != nil {
		pub.Reason = ut.Reason
	}
	if ut.Reviewed != nil {
		pub.Reviewed = ut.Reviewed
	}
	return &pub
}

// HuddleMembership user type.
type HuddleMembership struct {
	// Timestamp of membership
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// huddle ID
	HuddleID *string `form:"huddle_id,omitempty" json:"huddle_id,omitempty" xml:"huddle_id,omitempty"`
	// Relationship ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Patient ID
	PatientID *string `form:"patient_id,omitempty" json:"patient_id,omitempty" xml:"patient_id,omitempty"`
	// Reason patient was added to huddle
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Has patient been reviewed in this huddle
	Reviewed *bool `form:"reviewed,omitempty" json:"reviewed,omitempty" xml:"reviewed,omitempty"`
}

// address user type.
type address struct {
	// City Name
	City *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	// Postal Code
	PostalCode *string `form:"postalCode,omitempty" json:"postalCode,omitempty" xml:"postalCode,omitempty"`
	// State Name
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Street Name
	Street []string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
}

// Publicize creates Address from address
func (ut *address) Publicize() *Address {
	var pub Address
	if ut.City != nil {
		pub.City = ut.City
	}
	if ut.PostalCode != nil {
		pub.PostalCode = ut.PostalCode
	}
	if ut.State != nil {
		pub.State = ut.State
	}
	if ut.Street != nil {
		pub.Street = ut.Street
	}
	return &pub
}

// Address user type.
type Address struct {
	// City Name
	City *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	// Postal Code
	PostalCode *string `form:"postalCode,omitempty" json:"postalCode,omitempty" xml:"postalCode,omitempty"`
	// State Name
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Street Name
	Street []string `form:"street,omitempty" json:"street,omitempty" xml:"street,omitempty"`
}

// name user type.
type name struct {
	// Family Name
	Family *string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Full Name
	Full *string `form:"full,omitempty" json:"full,omitempty" xml:"full,omitempty"`
	// Given Name
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Middle Initial
	MiddleInitial *string `form:"middleInitial,omitempty" json:"middleInitial,omitempty" xml:"middleInitial,omitempty"`
}

// Publicize creates Name from name
func (ut *name) Publicize() *Name {
	var pub Name
	if ut.Family != nil {
		pub.Family = ut.Family
	}
	if ut.Full != nil {
		pub.Full = ut.Full
	}
	if ut.Given != nil {
		pub.Given = ut.Given
	}
	if ut.MiddleInitial != nil {
		pub.MiddleInitial = ut.MiddleInitial
	}
	return &pub
}

// Name user type.
type Name struct {
	// Family Name
	Family *string `form:"family,omitempty" json:"family,omitempty" xml:"family,omitempty"`
	// Full Name
	Full *string `form:"full,omitempty" json:"full,omitempty" xml:"full,omitempty"`
	// Given Name
	Given *string `form:"given,omitempty" json:"given,omitempty" xml:"given,omitempty"`
	// Middle Initial
	MiddleInitial *string `form:"middleInitial,omitempty" json:"middleInitial,omitempty" xml:"middleInitial,omitempty"`
}

// riskAssessment user type.
type riskAssessment struct {
	// Date
	Date *time.Time `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Risk Assessment Group ID
	GroupID *string `form:"groupId,omitempty" json:"groupId,omitempty" xml:"groupId,omitempty"`
	// Risk Assessment ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value
	Value *int `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// Publicize creates RiskAssessment from riskAssessment
func (ut *riskAssessment) Publicize() *RiskAssessment {
	var pub RiskAssessment
	if ut.Date != nil {
		pub.Date = ut.Date
	}
	if ut.GroupID != nil {
		pub.GroupID = ut.GroupID
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.Value != nil {
		pub.Value = ut.Value
	}
	return &pub
}

// RiskAssessment user type.
type RiskAssessment struct {
	// Date
	Date *time.Time `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Risk Assessment Group ID
	GroupID *string `form:"groupId,omitempty" json:"groupId,omitempty" xml:"groupId,omitempty"`
	// Risk Assessment ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Value
	Value *int `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}
