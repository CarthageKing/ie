// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"time"
)

// AddPatientCareTeamContext provides the care_team add_patient action context.
type AddPatientCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID        string
	PatientID string
}

// NewAddPatientCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller add_patient action.
func NewAddPatientCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddPatientCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddPatientCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramPatientID := req.Params["patient_id"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		rctx.PatientID = rawPatientID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddPatientCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *AddPatientCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddPatientCareTeamContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddPatientCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AddPatientCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddPatientCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateCareTeamContext provides the care_team create action context.
type CreateCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCareTeamPayload
}

// NewCreateCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller create action.
func NewCreateCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCareTeamPayload is the care_team create action payload.
type createCareTeamPayload struct {
	// Care team leader
	Leader *string `form:"leader,omitempty" json:"leader,omitempty" xml:"leader,omitempty"`
	// Care team name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCareTeamPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Leader == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "leader"))
	}
	return
}

// Publicize creates CreateCareTeamPayload from createCareTeamPayload
func (payload *createCareTeamPayload) Publicize() *CreateCareTeamPayload {
	var pub CreateCareTeamPayload
	if payload.Leader != nil {
		pub.Leader = *payload.Leader
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateCareTeamPayload is the care_team create action payload.
type CreateCareTeamPayload struct {
	// Care team leader
	Leader string `form:"leader" json:"leader" xml:"leader"`
	// Care team name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCareTeamPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Leader == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "leader"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *CreateCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCareTeamContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteCareTeamContext provides the care_team delete action context.
type DeleteCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller delete action.
func NewDeleteCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *DeleteCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteCareTeamContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// HuddlesCareTeamContext provides the care_team huddles action context.
type HuddlesCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Date      *string
	ID        string
	PatientID *string
}

// NewHuddlesCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller huddles action.
func NewHuddlesCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*HuddlesCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HuddlesCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDate := req.Params["date"]
	if len(paramDate) > 0 {
		rawDate := paramDate[0]
		rctx.Date = &rawDate
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramPatientID := req.Params["patient_id"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		rctx.PatientID = &rawPatientID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HuddlesCareTeamContext) OK(r HuddleCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.huddle+json; type=collection")
	if r == nil {
		r = HuddleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HuddlesCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *HuddlesCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *HuddlesCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListCareTeamContext provides the care_team list action context.
type ListCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller list action.
func NewListCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCareTeamContext) OK(r CareTeamCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json; type=collection")
	if r == nil {
		r = CareTeamCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RemovePatientCareTeamContext provides the care_team remove_patient action context.
type RemovePatientCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID        string
	PatientID string
}

// NewRemovePatientCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller remove_patient action.
func NewRemovePatientCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemovePatientCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemovePatientCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramPatientID := req.Params["patient_id"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		rctx.PatientID = rawPatientID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemovePatientCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *RemovePatientCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RemovePatientCareTeamContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RemovePatientCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RemovePatientCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RemovePatientCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ScheduleCareTeamContext provides the care_team schedule action context.
type ScheduleCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *ScheduleCareTeamPayload
}

// NewScheduleCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller schedule action.
func NewScheduleCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ScheduleCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ScheduleCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// scheduleCareTeamPayload is the care_team schedule action payload.
type scheduleCareTeamPayload struct {
	// Date in YYYY-MM-dd format to schedule huddle
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Unique patient ID
	PatientID *string `form:"patient_id,omitempty" json:"patient_id,omitempty" xml:"patient_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *scheduleCareTeamPayload) Validate() (err error) {
	if payload.PatientID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "patient_id"))
	}
	if payload.Date == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "date"))
	}
	return
}

// Publicize creates ScheduleCareTeamPayload from scheduleCareTeamPayload
func (payload *scheduleCareTeamPayload) Publicize() *ScheduleCareTeamPayload {
	var pub ScheduleCareTeamPayload
	if payload.Date != nil {
		pub.Date = *payload.Date
	}
	if payload.PatientID != nil {
		pub.PatientID = *payload.PatientID
	}
	return &pub
}

// ScheduleCareTeamPayload is the care_team schedule action payload.
type ScheduleCareTeamPayload struct {
	// Date in YYYY-MM-dd format to schedule huddle
	Date string `form:"date" json:"date" xml:"date"`
	// Unique patient ID
	PatientID string `form:"patient_id" json:"patient_id" xml:"patient_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *ScheduleCareTeamPayload) Validate() (err error) {
	if payload.PatientID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "patient_id"))
	}
	if payload.Date == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "date"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *ScheduleCareTeamContext) OK(r *Huddle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.huddle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *ScheduleCareTeamContext) Created(r *Huddle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.huddle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ScheduleCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ScheduleCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ScheduleCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowCareTeamContext provides the care_team show action context.
type ShowCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller show action.
func NewShowCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateCareTeamContext provides the care_team update action context.
type UpdateCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *CareTeamPayload
}

// NewUpdateCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller update action.
func NewUpdateCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCareTeamContext) OK(r *CareTeam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *UpdateCareTeamContext) OKLink(r *CareTeamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateCareTeamContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCareTeamContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCareTeamContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListEventContext provides the event list action context.
type ListEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EndTime       *time.Time
	ID            string
	RiskServiceID *string
	StartTime     *time.Time
	Type          *string
}

// NewListEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller list action.
func NewListEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEndTime := req.Params["end_time"]
	if len(paramEndTime) > 0 {
		rawEndTime := paramEndTime[0]
		if endTime, err2 := time.Parse(time.RFC3339, rawEndTime); err2 == nil {
			tmp1 := &endTime
			rctx.EndTime = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("end_time", rawEndTime, "datetime"))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramRiskServiceID := req.Params["risk_service_id"]
	if len(paramRiskServiceID) > 0 {
		rawRiskServiceID := paramRiskServiceID[0]
		rctx.RiskServiceID = &rawRiskServiceID
	}
	paramStartTime := req.Params["start_time"]
	if len(paramStartTime) > 0 {
		rawStartTime := paramStartTime[0]
		if startTime, err2 := time.Parse(time.RFC3339, rawStartTime); err2 == nil {
			tmp2 := &startTime
			rctx.StartTime = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start_time", rawStartTime, "datetime"))
		}
	}
	paramType := req.Params["type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEventContext) OK(r EventCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.event+json; type=collection")
	if r == nil {
		r = EventCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListEventContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEventContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEventContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CancelHuddleContext provides the huddle cancel action context.
type CancelHuddleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID        string
	PatientID string
}

// NewCancelHuddleContext parses the incoming request URL and body, performs validations and creates the
// context used by the huddle controller cancel action.
func NewCancelHuddleContext(ctx context.Context, r *http.Request, service *goa.Service) (*CancelHuddleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CancelHuddleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramPatientID := req.Params["patient_id"]
	if len(paramPatientID) > 0 {
		rawPatientID := paramPatientID[0]
		rctx.PatientID = rawPatientID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CancelHuddleContext) OK(r *Huddle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.huddle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CancelHuddleContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CancelHuddleContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CancelHuddleContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CancelHuddleContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPatientContext provides the patient list action context.
type ListPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CareTeamID *string
	HuddleID   *string
	Page       *int
	PerPage    *int
	SearchTerm *string
	SortBy     *string
}

// NewListPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller list action.
func NewListPatientContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCareTeamID := req.Params["care_team_id"]
	if len(paramCareTeamID) > 0 {
		rawCareTeamID := paramCareTeamID[0]
		rctx.CareTeamID = &rawCareTeamID
	}
	paramHuddleID := req.Params["huddle_id"]
	if len(paramHuddleID) > 0 {
		rawHuddleID := paramHuddleID[0]
		rctx.HuddleID = &rawHuddleID
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp4 := page
			tmp3 := &tmp4
			rctx.Page = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page != nil {
			if *rctx.Page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, *rctx.Page, 1, true))
			}
		}
	}
	paramPerPage := req.Params["per_page"]
	if len(paramPerPage) > 0 {
		rawPerPage := paramPerPage[0]
		if perPage, err2 := strconv.Atoi(rawPerPage); err2 == nil {
			tmp6 := perPage
			tmp5 := &tmp6
			rctx.PerPage = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("per_page", rawPerPage, "integer"))
		}
		if rctx.PerPage != nil {
			if *rctx.PerPage < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`per_page`, *rctx.PerPage, 1, true))
			}
		}
	}
	paramSearchTerm := req.Params["search_term"]
	if len(paramSearchTerm) > 0 {
		rawSearchTerm := paramSearchTerm[0]
		rctx.SearchTerm = &rawSearchTerm
	}
	paramSortBy := req.Params["sort_by"]
	if len(paramSortBy) > 0 {
		rawSortBy := paramSortBy[0]
		rctx.SortBy = &rawSortBy
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPatientContext) OK(r PatientCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKList sends a HTTP response with status code 200.
func (ctx *ListPatientContext) OKList(r PatientListCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientListCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListPatientContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPatientContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowPatientContext provides the patient show action context.
type ShowPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller show action.
func NewShowPatientContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OK(r *Patient) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OKLink(r *PatientLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKList sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OKList(r *PatientList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPatientContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPatientContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListRiskAssessmentContext provides the risk_assessment list action context.
type ListRiskAssessmentContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EndDate       *time.Time
	ID            string
	RiskServiceID string
	StartDate     *time.Time
}

// NewListRiskAssessmentContext parses the incoming request URL and body, performs validations and creates the
// context used by the risk_assessment controller list action.
func NewListRiskAssessmentContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRiskAssessmentContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRiskAssessmentContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEndDate := req.Params["end_date"]
	if len(paramEndDate) > 0 {
		rawEndDate := paramEndDate[0]
		if endDate, err2 := time.Parse(time.RFC3339, rawEndDate); err2 == nil {
			tmp7 := &endDate
			rctx.EndDate = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("end_date", rawEndDate, "datetime"))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	paramRiskServiceID := req.Params["risk_service_id"]
	if len(paramRiskServiceID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("risk_service_id"))
	} else {
		rawRiskServiceID := paramRiskServiceID[0]
		rctx.RiskServiceID = rawRiskServiceID
	}
	paramStartDate := req.Params["start_date"]
	if len(paramStartDate) > 0 {
		rawStartDate := paramStartDate[0]
		if startDate, err2 := time.Parse(time.RFC3339, rawStartDate); err2 == nil {
			tmp8 := &startDate
			rctx.StartDate = tmp8
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start_date", rawStartDate, "datetime"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRiskAssessmentContext) OK(r RiskAssessmentCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.riskassessment+json; type=collection")
	if r == nil {
		r = RiskAssessmentCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKList sends a HTTP response with status code 200.
func (ctx *ListRiskAssessmentContext) OKList(r RiskAssessmentListCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.riskassessment+json; type=collection")
	if r == nil {
		r = RiskAssessmentListCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListRiskAssessmentContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListRiskAssessmentContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListRiskCategoriesContext provides the risk_categories list action context.
type ListRiskCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewListRiskCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the risk_categories controller list action.
func NewListRiskCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRiskCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRiskCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRiskCategoriesContext) OK(r RiskCategoryCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "applicaiton/vnd.riskassessment+json; type=collection")
	if r == nil {
		r = RiskCategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListRiskCategoriesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListRiskCategoriesContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListRiskServiceContext provides the risk_service list action context.
type ListRiskServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListRiskServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the risk_service controller list action.
func NewListRiskServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRiskServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRiskServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRiskServiceContext) OK(r RiskServiceCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "applicatoin/vnd.riskservice+json; type=collection")
	if r == nil {
		r = RiskServiceCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKList sends a HTTP response with status code 200.
func (ctx *ListRiskServiceContext) OKList(r RiskServiceListCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "applicatoin/vnd.riskservice+json; type=collection")
	if r == nil {
		r = RiskServiceListCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListRiskServiceContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListRiskServiceContext) NotFound(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListRiskServiceContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
