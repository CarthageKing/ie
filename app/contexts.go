// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/intervention-engine/ie/design
// --out=$(GOPATH)/src/github.com/intervention-engine/ie
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateCareTeamContext provides the care_team create action context.
type CreateCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCreateCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller create action.
func NewCreateCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateCareTeamContext) OK(r *Careteam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *CreateCareTeamContext) OKLink(r *CareteamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateCareTeamContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteCareTeamContext provides the care_team delete action context.
type DeleteCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewDeleteCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller delete action.
func NewDeleteCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCareTeamContext) OK(r *Careteam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *DeleteCareTeamContext) OKLink(r *CareteamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCareTeamContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListCareTeamContext provides the care_team list action context.
type ListCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller list action.
func NewListCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCareTeamContext) OK(r CareteamCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json; type=collection")
	if r == nil {
		r = CareteamCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCareTeamContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowCareTeamContext provides the care_team show action context.
type ShowCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller show action.
func NewShowCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCareTeamContext) OK(r *Careteam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowCareTeamContext) OKLink(r *CareteamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCareTeamContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateCareTeamContext provides the care_team update action context.
type UpdateCareTeamContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUpdateCareTeamContext parses the incoming request URL and body, performs validations and creates the
// context used by the care_team controller update action.
func NewUpdateCareTeamContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCareTeamContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCareTeamContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCareTeamContext) OK(r *Careteam) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *UpdateCareTeamContext) OKLink(r *CareteamLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.careteam+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCareTeamContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCareTeamContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListPatientContext provides the patient list action context.
type ListPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller list action.
func NewListPatientContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPatientContext) OK(r PatientCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	if r == nil {
		r = PatientCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowPatientContext provides the patient show action context.
type ShowPatientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowPatientContext parses the incoming request URL and body, performs validations and creates the
// context used by the patient controller show action.
func NewShowPatientContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPatientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPatientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OK(r *Patient) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowPatientContext) OKLink(r *PatientLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPatientContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPatientContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
